@model Calorie_Scanner_Tracker_And_Diet_Suggestor.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<h2 class="text-center fw-bold mb-4">@ViewData["Title"]</h2>

<!-- Filter Form -->
<form method="get" class="row g-2 mb-4">
    <div class="col-md-3">
        <label for="startDate">Start Date</label>
        <input type="date" id="startDate" name="startDate" value="@Model.StartDateFilter?.ToString("yyyy-MM-dd")" class="form-control">
    </div>
    <div class="col-md-3">
        <label for="endDate">End Date</label>
        <input type="date" id="endDate" name="endDate" value="@Model.EndDateFilter?.ToString("yyyy-MM-dd")" class="form-control">
    </div>
    <div class="col-md-3">
        <label for="mealType">Meal Type</label>
        <select id="mealType" name="mealType" class="form-select">
            <option value="">All Meals</option>
            <option value="breakfast" selected="@(Model.MealTypeFilter == "breakfast")">Breakfast</option>
            <option value="lunch" selected="@(Model.MealTypeFilter == "lunch")">Lunch</option>
            <option value="dinner" selected="@(Model.MealTypeFilter == "dinner")">Dinner</option>
        </select>
    </div>
    <div class="col-md-3 align-self-end">
        <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
    </div>
</form>

@if (Model.FoodLogs == null || !Model.FoodLogs.Any())
{
    <div class="alert alert-info">No food logs available for the selected filters.</div>
}
else
{
    <div class="row mb-4">
        <!-- Macronutrient Breakdown -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm p-3 h-100">
                <h5 class="card-title text-center">Macronutrient Breakdown</h5>
                <button class="btn btn-outline-primary w-100" type="button" data-bs-toggle="collapse" data-bs-target="#pieChartCollapse" aria-expanded="false" aria-controls="pieChartCollapse">
                    Toggle Macronutrient Chart
                </button>
                <div class="card-body d-flex justify-content-center align-items-center collapse" id="pieChartCollapse" style="height: 350px;">
                    <canvas id="caloriesChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Daily Calorie Intake -->
        <div class="col-md-6 mb-4">
            <div class="card shadow-sm p-3 h-100">
                <h5 class="card-title text-center">Daily Calorie Intake</h5>
                <button class="btn btn-outline-primary w-100" type="button" data-bs-toggle="collapse" data-bs-target="#barChartCollapse" aria-expanded="false" aria-controls="barChartCollapse">
                    Toggle Calorie Intake Chart
                </button>
                <div class="card-body d-flex justify-content-center align-items-center collapse" id="barChartCollapse" style="height: 450px;">
                    <canvas id="dailyCaloriesChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Weekly Calorie Trend -->
    <div class="card shadow-sm p-3 mb-4">
        <h5 class="card-title text-center">Weekly Calorie Trend</h5>
        <button class="btn btn-outline-primary w-100" type="button" data-bs-toggle="collapse" data-bs-target="#trendChartCollapse" aria-expanded="false" aria-controls="trendChartCollapse">
            Toggle Weekly Calorie Trend Chart
        </button>
        <div class="card-body d-flex justify-content-center align-items-center collapse" id="trendChartCollapse" style="height: 350px;">
            <canvas id="weeklyCaloriesTrend"></canvas>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-2">
        <h4>Recently Logged Meals</h4>
        <div>
            <button class="btn btn-outline-success btn-sm me-2" onclick="exportToExcel()">Export to Excel</button>
            <button class="btn btn-outline-danger btn-sm" onclick="exportToPDF()">Export to PDF</button>
            <button class="btn btn-outline-primary btn-sm" onclick="exportToCSV()">Export to CSV</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped" id="foodLogTable">
            <thead class="table-light">
                <tr>
                    <th>Date</th>
                    <th>Meal</th>
                    <th>Type</th>
                    <th>Calories</th>
                    <th>Protein</th>
                    <th>Carbs</th>
                    <th>Fats</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in Model.FoodLogs.OrderByDescending(f => f.DateLogged))
                {
                    <tr>
                        <td>@log.DateLogged.ToShortDateString()</td>
                        <td>@log.Meal.Name</td>
                        <td>@log.Meal.MealType</td>
                        <td>@log.Meal.Calories</td>
                        <td>@log.Meal.Protein</td>
                        <td>@log.Meal.Carbs</td>
                        <td>@log.Meal.Fats</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Export Libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>


<script>
    const pieCtx = document.getElementById('caloriesChart').getContext('2d');
    new Chart(pieCtx, {
        type: 'pie',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.PieChartLabels)),
            datasets: [{
                data: @Html.Raw(Json.Serialize(Model.PieChartData)),
                backgroundColor: ['#ff6384', '#36a2eb', '#ffce56'],
                borderColor: ['#fff', '#fff', '#fff'],
                borderWidth: 1
            }]
        },
        options: {
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.chart._metasets[0].total;
                            const value = context.raw;
                            const percentage = ((value / total) * 100).toFixed(1);
                            return `${context.label}: ${value}g (${percentage}%)`;
                        }
                    }
                },
                legend: {
                    position: 'bottom'
                }
            }
        }
    });

    const barCtx = document.getElementById('dailyCaloriesChart').getContext('2d');
    new Chart(barCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ChartData.Select(cd => cd.Date))),
            datasets: [{
                label: 'Calories',
                data: @Html.Raw(Json.Serialize(Model.ChartData.Select(cd => cd.Calories))),
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const trendCtx = document.getElementById('weeklyCaloriesTrend').getContext('2d');
    new Chart(trendCtx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.ChartData.Select(cd => cd.Date))),
            datasets: [
                {
                    type: 'bar',
                    label: 'Calories',
                    data: @Html.Raw(Json.Serialize(Model.ChartData.Select(cd => cd.Calories))),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)'
                },
                {
                    type: 'line',
                    label: 'Target',
                    data: @Html.Raw(Json.Serialize(Enumerable.Repeat(Model.TargetCalories, Model.ChartData.Count()).ToList())),
                    borderColor: 'rgba(255, 99, 132, 0.9)',
                    borderWidth: 2,
                    fill: false,
                    tension: 0.3
                }
            ]
        },
        options: {
            plugins: {
                legend: {
                    position: 'top'
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    function exportToExcel() {
        const table = document.getElementById("foodLogTable");
        const wb = XLSX.utils.table_to_book(table, { sheet: "Food Logs" });
        XLSX.writeFile(wb, "FoodLogs.xlsx");
    }

    async function exportToPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        const table = document.getElementById("foodLogTable");
        const headers = Array.from(table.querySelectorAll("thead th")).map(th => th.innerText);
        const rows = Array.from(table.querySelectorAll("tbody tr")).map(tr =>
            Array.from(tr.querySelectorAll("td")).map(td => td.innerText)
        );

        doc.text("Recently Logged Meals", 14, 15);
        doc.autoTable({
            head: [headers],
            body: rows,
            startY: 20
        });

        doc.save("FoodLogs.pdf");
    }

    function exportToCSV() {
        const table = document.getElementById("foodLogTable");
        let csv = "";
        const rows = table.querySelectorAll("tr");

        rows.forEach(row => {
            const cols = row.querySelectorAll("th, td");
            const rowData = Array.from(cols).map(col => `"${col.innerText.trim()}"`).join(",");
            csv += rowData + "\n";
        });

        const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "FoodLogs.csv";
        link.click();
    }

</script>
