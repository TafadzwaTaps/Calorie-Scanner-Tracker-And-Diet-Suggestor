<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<style>
    /* Custom CSS for loading overlay */
    #loadingOverlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7); /* Dark semi-transparent background */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050; /* Above Bootstrap modals */
        flex-direction: column;
        color: white;
        text-align: center; /* Ensure content inside is centered */
    }

        #loadingOverlay .spinner-border {
            width: 3rem;
            height: 3rem;
            margin-bottom: 1rem;
        }

        #loadingOverlay h4 {
            margin-bottom: 0.5rem;
        }

        /* Styles to ensure the preview image is centered and visible during loading */
        #loadingOverlay .loading-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 100%; /* Take full width to help with centering */
        }

        #loadingOverlay .loading-image-preview {
            max-width: 200px; /* Adjust as needed */
            max-height: 200px; /* Adjust as needed */
            border-radius: 8px;
            margin-bottom: 1rem;
            object-fit: contain; /* Ensure the image fits within the bounds without distortion */
        }
</style>

<div class="container mt-5">
    <h3 class="text-center mb-4">🍽 Meal Image Upload</h3>

    <div class="row">
        <div class="col-md-6 mb-4">
            <h5>📷 Capture from Camera</h5>
            <div class="d-flex justify-content-between mb-2">
                <button id="startCamera" class="btn btn-info btn-sm">Start Camera</button>
                <button id="capture" class="btn btn-primary btn-sm">Capture</button>
                <button id="stopCamera" class="btn btn-danger btn-sm">Stop</button>
            </div>
            <video id="video" autoplay class="w-100 mb-2 border" style="max-height: 250px;"></video>
            <canvas id="canvas" style="display:none;"></canvas>
            <p id="captureMessage" class="text-success mt-2" style="display: none;">✅ Image captured successfully!</p>
        </div>

        <div class="col-md-6 mb-4">
            <h5>🖼 Upload or Drag & Drop Image</h5>
            <input type="file" id="imageFile" name="imageFile" accept="image/*" class="form-control-file mb-2">
            <div id="dropZone" class="border p-3 text-center rounded bg-light">
                📥 Drag & Drop Image Here
            </div>
        </div>
    </div>

    <div class="text-center mb-3">
        <img id="photo" class="img-fluid rounded border" style="display:none; max-height: 250px;" />
    </div>

    <form id="uploadForm" method="post" enctype="multipart/form-data" class="text-center">
        <input type="hidden" id="imageData" name="imageData" />
        <button type="submit" class="btn btn-success">🚀 Upload Image</button>
    </form>

    <div id="loadingOverlay" style="display:none;">
        <div class="loading-content">
            <img id="loadingImagePreview" class="loading-image-preview" style="display: none;" alt="Preview">
            <div class="spinner-border text-light" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <h4>Analyzing your meal...</h4>
            <p id="loadingMessage">Please wait, this might take a moment.</p>
            <div class="progress mt-3 w-50" style="height: 25px;">
                <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%">
                    0%
                </div>
            </div>
        </div>
    </div>


    <div id="resultArea" class="mt-4" style="display:none;">
        <h5 class="text-center">🍴 Nutrition Information</h5>
        <img id="uploadedImage" class="img-fluid d-block mx-auto mb-3 border rounded" style="max-height: 250px;" />
        <ul class="list-group mb-3">
            <li class="list-group-item">Calories: <span id="calories"></span> kcal</li>
            <li class="list-group-item">Protein: <span id="protein"></span> g</li>
            <li class="list-group-item">Carbs: <span id="carbs"></span> g</li>
            <li class="list-group-item">Fats: <span id="fats"></span> g</li>
        </ul>
        <div id="apiWarningMessage" class="alert alert-warning text-center" style="display:none;"></div>
        <div id="errorMessage" class="alert alert-danger text-center" style="display:none;"></div>
        <div class="text-center">
            <button id="retryButton" class="btn btn-secondary">🔄 Analyze Another Meal</button>
        </div>
    </div>
</div>

<script>
    const video = document.getElementById("video");
    const canvas = document.getElementById("canvas");
    const captureBtn = document.getElementById("capture");
    const stopCameraBtn = document.getElementById("stopCamera");
    const startCameraBtn = document.getElementById("startCamera");
    const uploadForm = document.getElementById("uploadForm");
    const imageDataInput = document.getElementById("imageData");
    const imageFileInput = document.getElementById("imageFile");
    const captureMessage = document.getElementById("captureMessage");
    const photoPreview = document.getElementById("photo");

    const loadingOverlay = document.getElementById("loadingOverlay");
    const progressBar = document.getElementById("progressBar");
    const loadingMessage = document.getElementById("loadingMessage");
    const loadingImagePreview = document.getElementById("loadingImagePreview"); // New: Image for loading screen

    const resultArea = document.getElementById("resultArea");
    const uploadedImage = document.getElementById("uploadedImage");
    const caloriesSpan = document.getElementById("calories");
    const proteinSpan = document.getElementById("protein");
    const carbsSpan = document.getElementById("carbs");
    const fatsSpan = document.getElementById("fats");
    const errorMessage = document.getElementById("errorMessage");
    const apiWarningMessage = document.getElementById("apiWarningMessage");
    const retryButton = document.getElementById("retryButton");
    const dropZone = document.getElementById("dropZone");

    let cameraStream = null;

    // Simulated delay duration (adjusted for 45% reduction from instant)
    // Total simulated delay will be about 2.5 seconds (2500ms)
    const SIMULATED_DELAY_STEP = 500; // 500ms per step

    // Helper to show/hide sections
    function showSection(element) { element.style.display = 'block'; }
    function hideSection(element) { element.style.display = 'none'; }

    // Start camera when button is clicked
    startCameraBtn.addEventListener("click", () => {
        hideSection(resultArea);
        hideSection(errorMessage);
        hideSection(apiWarningMessage);
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => {
                cameraStream = stream;
                video.srcObject = stream;
                showSection(video);
                hideSection(photoPreview); // Hide existing preview if camera starts
            })
            .catch(err => {
                console.error("Camera access error: ", err);
                alert("Could not access camera. Please check permissions or try file upload.");
            });
    });

    // Capture from camera
    captureBtn.addEventListener("click", () => {
        if (!cameraStream) {
            alert("Please start the camera first.");
            return;
        }
        hideSection(resultArea);
        hideSection(errorMessage);
        hideSection(apiWarningMessage);

        const context = canvas.getContext("2d");
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);
        const imageDataURL = canvas.toDataURL("image/png");
        imageDataInput.value = imageDataURL;
        imageFileInput.value = ''; // Clear file input if using camera

        photoPreview.src = imageDataURL;
        showSection(photoPreview);
        hideSection(video); // Hide video feed after capture

        showSection(captureMessage);
        setTimeout(() => hideSection(captureMessage), 3000);
    });

    // Stop camera
    stopCameraBtn.addEventListener("click", () => {
        if (cameraStream) {
            cameraStream.getTracks().forEach(track => track.stop());
            video.srcObject = null;
            cameraStream = null;
            hideSection(video); // Hide video element
        }
    });

    // File input preview
    imageFileInput.addEventListener("change", () => {
        hideSection(resultArea);
        hideSection(errorMessage);
        hideSection(apiWarningMessage);
        if (imageFileInput.files && imageFileInput.files[0]) {
            const reader = new FileReader();
            reader.onload = e => {
                photoPreview.src = e.target.result;
                showSection(photoPreview);
                hideSection(video); // Hide video if file is selected
                stopCameraBtn.click(); // Stop camera if running
            };
            reader.readAsDataURL(imageFileInput.files[0]);
            imageDataInput.value = ''; // Clear imageData if using file input
        }
    });

    // Drag & drop handler
    dropZone.addEventListener("dragover", e => {
        e.preventDefault();
        dropZone.classList.add("bg-secondary");
    });

    dropZone.addEventListener("dragleave", () => {
        dropZone.classList.remove("bg-secondary");
    });

    dropZone.addEventListener("drop", e => {
        e.preventDefault();
        dropZone.classList.remove("bg-secondary");

        const file = e.dataTransfer.files[0];
        if (file && file.type.startsWith("image/")) {
            imageFileInput.files = e.dataTransfer.files; // Assign dropped file to input
            const reader = new FileReader();
            reader.onload = e => {
                photoPreview.src = e.target.result;
                showSection(photoPreview);
                hideSection(video); // Hide video if file is dropped
                stopCameraBtn.click(); // Stop camera if running
            };
            reader.readAsDataURL(file);
            imageDataInput.value = ''; // Clear imageData if using file input
        } else {
            alert("Only image files are allowed.");
        }
    });

    // Upload form submit
    uploadForm.addEventListener("submit", async e => {
        e.preventDefault();

        const formData = new FormData();
        let fileToUpload = null;
        let fileName = "uploaded_image.png"; // Default file name

        if (imageFileInput.files.length > 0) {
            fileToUpload = imageFileInput.files[0];
            fileName = fileToUpload.name;
            formData.append("imageFile", fileToUpload);
        } else if (imageDataInput.value) {
            // Convert base64 to Blob for consistent handling and better server compatibility
            const byteString = atob(imageDataInput.value.split(',')[1]);
            const mimeString = imageDataInput.value.split(',')[0].split(':')[1].split(';')[0];
            const ab = new ArrayBuffer(byteString.length);
            const ia = new Uint8Array(ab);
            for (let i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            fileToUpload = new Blob([ab], { type: mimeString });
            fileName = `captured_image.${mimeString.split('/')[1] || 'png'}`; // Dynamic extension
            formData.append("imageFile", fileToUpload, fileName); // Append as file
        } else {
            alert("Please capture an image or select a file before uploading.");
            return;
        }

        // Show loading overlay
        showSection(loadingOverlay);
        hideSection(errorMessage);
        hideSection(apiWarningMessage);
        hideSection(resultArea);
        hideSection(photoPreview); // Hide the main preview image before setting the one in the overlay

        // Display the image being processed in the loading overlay
        if (fileToUpload) {
            const reader = new FileReader();
            reader.onload = e => {
                loadingImagePreview.src = e.target.result;
                showSection(loadingImagePreview);
            };
            reader.readAsDataURL(fileToUpload);
        } else {
            hideSection(loadingImagePreview);
        }

        // Reset progress bar
        progressBar.style.width = "0%";
        progressBar.innerText = "0%";
        loadingMessage.textContent = "Initializing upload...";


        // --- Simulated Analysis Steps with Delays ---
        let currentProgress = 0;
        const progressIncrement = 25; // For each step

        // Step 1: Uploading Image
        loadingMessage.textContent = "Uploading image...";
        currentProgress += progressIncrement;
        progressBar.style.width = currentProgress + "%";
        progressBar.innerText = currentProgress + "%";
        await new Promise(resolve => setTimeout(resolve, SIMULATED_DELAY_STEP));

        const xhr = new XMLHttpRequest();
        xhr.open("POST", "/Meals/UploadImage", true);

        xhr.upload.onprogress = event => {
            if (event.lengthComputable) {
                // Adjust upload progress to fill up to 50% for combined effect
                const uploadPercent = Math.round((event.loaded / event.total) * (progressIncrement / 100) * 100);
                progressBar.style.width = (currentProgress + uploadPercent) + "%";
                progressBar.innerText = (currentProgress + uploadPercent) + "%";
                if (currentProgress + uploadPercent < 50) { // Limit message update
                    loadingMessage.textContent = `Uploading image... ${currentProgress + uploadPercent}%`;
                }
            }
        };

        xhr.onload = async () => { // Make this async to await internal delays
            if (xhr.status >= 200 && xhr.status < 300) { // Success (2xx status codes)
                // Step 2: Analyzing Image
                loadingMessage.textContent = "Analyzing image...";
                currentProgress = 50; // Set to 50% after upload completion
                progressBar.style.width = currentProgress + "%";
                progressBar.innerText = currentProgress + "%";
                await new Promise(resolve => setTimeout(resolve, SIMULATED_DELAY_STEP));

                // Step 3: Detecting Elements
                loadingMessage.textContent = "Detecting elements...";
                currentProgress = 75;
                progressBar.style.width = currentProgress + "%";
                progressBar.innerText = currentProgress + "%";
                await new Promise(resolve => setTimeout(resolve, SIMULATED_DELAY_STEP));

                // Step 4: Processing Results
                loadingMessage.textContent = "Processing results...";
                currentProgress = 90; // Almost done
                progressBar.style.width = currentProgress + "%";
                progressBar.innerText = currentProgress + "%";
                await new Promise(resolve => setTimeout(resolve, SIMULATED_DELAY_STEP)); // Final delay before displaying

                try {
                    const result = JSON.parse(xhr.responseText);
                    uploadedImage.src = result.imageUrl;
                    caloriesSpan.textContent = result.nutrition.calories;
                    proteinSpan.textContent = result.nutrition.protein;
                    carbsSpan.textContent = result.nutrition.carbs;
                    fatsSpan.textContent = result.nutrition.fats;

                    if (result.warning) {
                        apiWarningMessage.textContent = `⚠️ Warning: ${result.warning}`;
                        showSection(apiWarningMessage);
                    } else {
                        hideSection(apiWarningMessage);
                    }

                    // Final step: ensure 100% progress and display
                    loadingMessage.textContent = "Done!";
                    progressBar.style.width = "100%";
                    progressBar.innerText = "100%";
                    await new Promise(resolve => setTimeout(resolve, SIMULATED_DELAY_STEP)); // A small final delay for "Done" to be visible

                    hideSection(loadingOverlay); // Hide overlay finally
                    showSection(resultArea);
                    uploadForm.reset();
                    // photoPreview is already hidden, uploadedImage is shown in resultArea
                } catch (parseError) {
                    hideSection(loadingOverlay); // Hide on error
                    errorMessage.textContent = "❌ An unexpected error occurred while processing the response.";
                    showSection(errorMessage);
                    console.error("JSON parse error:", parseError);
                }
            } else {
                // Handle API errors (4xx, 5xx)
                hideSection(loadingOverlay); // Hide on error
                try {
                    const errorResult = JSON.parse(xhr.responseText);
                    errorMessage.textContent = `❌ ${errorResult.message || "An unknown error occurred."}`;
                } catch (parseError) {
                    errorMessage.textContent = `❌ Upload failed with status ${xhr.status}. Please try again.`;
                }
                showSection(errorMessage);
            }
        };

        xhr.onerror = () => {
            hideSection(loadingOverlay);
            errorMessage.textContent = "❌ Network error. Could not reach the server. Please check your connection.";
            showSection(errorMessage);
        };

        xhr.onabort = () => {
            hideSection(loadingOverlay);
            errorMessage.textContent = "Upload cancelled.";
            showSection(errorMessage);
        };

        xhr.send(formData);
    });

    // Retry button (resets UI for new analysis)
    retryButton.addEventListener("click", () => {
        hideSection(resultArea);
        hideSection(photoPreview); // Ensure this is hidden
        hideSection(errorMessage);
        hideSection(apiWarningMessage);
        hideSection(loadingImagePreview); // Ensure loading image preview is also hidden
        imageDataInput.value = "";
        imageFileInput.value = "";
        // If camera was active, restart it for convenience
        if (!cameraStream && video.srcObject === null) {
            startCameraBtn.click();
        }
    });

    // Handle initial state if no image is present
    document.addEventListener("DOMContentLoaded", () => {
        if (!photoPreview.src || photoPreview.src === window.location.href) {
            hideSection(photoPreview);
        }
    });
</script>